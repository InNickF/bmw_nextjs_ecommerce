Build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - imagen_docker="$CI_REGISTRY_IMAGE":"$CI_COMMIT_BRANCH"-"$CI_COMMIT_SHORT_SHA"  
    - echo $imagen_docker  
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"

# URL API
    - url_api="URL_apiecommerce_""$CI_COMMIT_BRANCH" ;
    - echo $url_api;  
    - url_api=$(eval echo $(echo '$'$url_api)) ;
    - echo $url_api;   

# URL SITIO
    - url_sitio="URL_""$CI_PROJECT_NAME""_""$CI_COMMIT_BRANCH" ;
    - echo $url_sitio;  
    - url_sitio=$(eval echo $(echo '$'$url_sitio)) ;
    - echo $url_sitio;   

#Construccion ENV

    - echo 'API_URL=https://'"$url_api" >> build/.env

  # SELECT master or staging ENV
    - echo "before_script - SELECT master or staging ENV" ;
    - if [ "$CI_COMMIT_BRANCH" == "master" ]; then 
        echo "MASTER" ; 
        cat "$CI_ENV_MASTER" >> build/.env ;            
      else 
        echo "STAGING" ;
        cat "$CI_ENV_STAGING" >> build/.env ;        
      fi

#    - ls -la 
#    - ls -la build    
#    - cat build/.env  
    - if [ "$CI_COMMIT_BRANCH" == "master" ]; then 
        echo "MASTER" ; 
        docker build --pull -t "$CI_REGISTRY_IMAGE" . ;
        docker tag  "$CI_REGISTRY_IMAGE" "$imagen_docker" ;        
        docker tag  "$CI_REGISTRY_IMAGE" "$CI_REGISTRY_IMAGE":latest ;        
      else 
        echo "STAGING" ;
        docker build --pull -t "$imagen_docker" . ;
      fi
  script:
    docker push "$CI_REGISTRY_IMAGE" ;

Deploy:
  image: alpine:3.7
  stage: deploy
  environment:
    name: deploy
  only:
    - /^release.*$/
    - master
    - staging
  variables:
    file_yaml_secret: 01-secret.yaml
    file_yaml_deployment: 02-deployment.yaml
    file_yaml_service: 03-service.yaml      
    file_yaml_ingress: 04-ingress.yaml          
  before_script:
# Instalar jq
    - apk update && apk add jq ;
  
# IMAGEN DOCKER
    - imagen_docker=$(echo "$CI_REGISTRY_IMAGE" | sed 's/\//\\\//g') ; 
    - imagen_docker="$imagen_docker"$(echo ":")"$CI_COMMIT_BRANCH"$(echo "-")"$CI_COMMIT_SHORT_SHA" ;
    - echo $imagen_docker ;
 
# URL API
    - url_api="URL_apiecommerce_""$CI_COMMIT_BRANCH" ;
    - echo $url_api;  
    - url_api=$(eval echo $(echo '$'$url_api)) ;
    - echo $url_api;

# URL SITIO
    - url_sitio="URL_""$CI_PROJECT_NAME""_""$CI_COMMIT_BRANCH" ;
    - echo $url_sitio;        
#    - url_sitio='eval echo $(echo '$'$url_sitio)' ;
    - url_sitio=$(eval echo $(echo '$'$url_sitio)) ;
    - echo $url_sitio;    

# SELECT master or staging ENV

    - echo "before_script - SELECT master or staging ENV" ;
    - if [ "$CI_COMMIT_BRANCH" == "master" ]; then 
        echo "MASTER" ; 
        cat "$CI_ENV_MASTER" > temp_env ;            
      else 
        echo "STAGING" ;
        cat "$CI_ENV_STAGING" > temp_env ;        
      fi
      
# ENV SECRET ${file_yaml_secret}
    - echo "before_script - ENV SECRET" ;
    - sed -i 's/^/  /g' temp_env ;
    - sed -i 's/=/:\ "/1' temp_env ;
    - sed -i 's/$/"/' temp_env ; 

    - echo "  API_URL:"" https://""$url_api" >> deploy/${file_yaml_secret} ;
    - cat temp_env >> deploy/${file_yaml_secret} ;
#    - sed -i '4 s/name:\ /&'"$CI_COMMIT_BRANCH"'-/g' deploy/${file_yaml_secret} ;
    - sed -i 's/campo_gitlab_ci/'"$CI_COMMIT_BRANCH"'-'"$CI_PROJECT_NAME"'/g' deploy/${file_yaml_secret} ;      
    - sed -i '5 s/namespace:\ /&'"$CI_COMMIT_BRANCH"'/g' deploy/${file_yaml_secret} ;

# DEPLOYMENT ${file_yaml_deployment}
    - echo "before_script - DEPLOYMENT" ;
    - sed -i 's/campo_gitlab_ci/'"$CI_COMMIT_BRANCH"'-'"$CI_PROJECT_NAME"'/g' deploy/${file_yaml_deployment} ;      
    - sed -i '5 s/namespace:\ /&'"$CI_COMMIT_BRANCH"'/g' deploy/${file_yaml_deployment}
    - sed -i '20 s/image:\ /&'"$imagen_docker"'/g' deploy/${file_yaml_deployment}
    
# SERVICE ${file_yaml_service}
    - echo "before_script - SERVICE" ;
    - sed -i 's/campo_gitlab_ci/'"$CI_COMMIT_BRANCH"'-'"$CI_PROJECT_NAME"'/g' deploy/${file_yaml_service} ;      
    - sed -i '5 s/namespace:\ /&'"$CI_COMMIT_BRANCH"'/g' deploy/${file_yaml_service}
    
# INGRESS ${file_yaml_ingress}
    - echo "before_script - INGRESS" ;
    - sed -i 's/campo_gitlab_ci/'"$CI_COMMIT_BRANCH"'-'"$CI_PROJECT_NAME"'/g' deploy/${file_yaml_ingress} ;      
    - sed -i '5 s/namespace:\ /&'"$CI_COMMIT_BRANCH"'/g' deploy/${file_yaml_ingress}    
    - sed -i 's/URL/'"$url_sitio"'/g' deploy/${file_yaml_ingress} ;          

  script:
#    - ls -la deploy    
#Ejecutable Kubectl
    - apk update  && apk add --no-cache curl grep
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p ${HOME}/.kube
    - cat ${KUBECONFIG} > $HOME/.kube/config
    
# ENV SECRET
    - echo "script - ENV SECRET"
#    - echo $file_yaml_secret    
#    - cat deploy/${file_yaml_secret}    
    - kubectl apply -f deploy/${file_yaml_secret}
    
# DEPLOYMENT
    - echo "script - DEPLOYMENT"
#    - echo $file_yaml_deployment    
#    - cat deploy/${file_yaml_deployment}
    - kubectl apply -f deploy/${file_yaml_deployment}    
    
# SERVICE
    - echo "script - SERVICE"
#    - echo $file_yaml_service    
#    - cat deploy/${file_yaml_service}    
    - kubectl apply -f deploy/${file_yaml_service}        

# INGRESS
    - echo "script - INGRESS"
#    - echo $file_yaml_service    
#    - cat deploy/${file_yaml_ingress}    
    - kubectl apply -f deploy/${file_yaml_ingress}     

# Clear orphaned replicasets
    - kubectl -n "$CI_COMMIT_BRANCH" get rs -o json|jq -r '.items[] | select(.spec.replicas | contains(0)) | " \(.metadata.name)"'
    - sleep 40
    - eval $(kubectl -n "$CI_COMMIT_BRANCH" get rs -o json|jq -r '.items[] | select(.spec.replicas | contains(0)) | "kubectl delete rs -n $CI_COMMIT_BRANCH \(.metadata.name)"')    
